{"ast":null,"code":"import axios from \"axios\";\n\n// export const getAllProduct = async (search) => {\n//     let res = {};\n//     if (search.length > 0) {\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?filter=name&filter=${search}`);\n//     } else {\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all`);\n//     }\n//     return res.data;\n// }\n\nexport const getAllProduct = async (search, minPrice = 0, maxPrice = 100000000) => {\n  const params = new URLSearchParams({\n    search: search || '',\n    minPrice: minPrice,\n    maxPrice: maxPrice\n  });\n  try {\n    const response = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?${params.toString()}`);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch products:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","getAllProduct","search","minPrice","maxPrice","params","URLSearchParams","response","get","process","env","REACT_APP_API_URL","toString","data","error","console"],"sources":["D:/Tu/NamIII/HKII/test - Copy/src/services/ProductService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// export const getAllProduct = async (search) => {\r\n//     let res = {};\r\n//     if (search.length > 0) {\r\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?filter=name&filter=${search}`);\r\n//     } else {\r\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all`);\r\n//     }\r\n//     return res.data;\r\n// }\r\n\r\n\r\nexport const getAllProduct = async (search, minPrice = 0, maxPrice = 100000000) => {\r\n    const params = new URLSearchParams({\r\n        search: search || '',\r\n        minPrice: minPrice,\r\n        maxPrice: maxPrice\r\n    });\r\n\r\n    try {\r\n        const response = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?${params.toString()}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('Failed to fetch products:', error);\r\n        throw error;\r\n    }\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,QAAQ,GAAG,CAAC,EAAEC,QAAQ,GAAG,SAAS,KAAK;EAC/E,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC;IAC/BJ,MAAM,EAAEA,MAAM,IAAI,EAAE;IACpBC,QAAQ,EAAEA,QAAQ;IAClBC,QAAQ,EAAEA;EACd,CAAC,CAAC;EAEF,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,oBAAmBN,MAAM,CAACO,QAAQ,CAAC,CAAE,EAAC,CAAC;IACzG,OAAOL,QAAQ,CAACM,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}