{"ast":null,"code":"import axios from \"axios\";\n\n// export const getAllProduct = async (search) => {\n//     let res = {};\n//     if (search.length > 0) {\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?filter=name&filter=${search}`);\n//     } else {\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all`);\n//     }\n//     return res.data;\n// }\n\n// export const getAllProduct = async (search, priceRange) => {\n//     let queryString = `${process.env.REACT_APP_API_URL}/product/get-all?`;\n//     if (search) {\n//         queryString += `filter=name||filter=type&filter=${search}&`;\n//     }\n//     queryString += `minPrice=${priceRange[0]}&maxPrice=${priceRange[1]}`;\n//     const res = await axios.get(queryString);\n//     return res.data;\n// };\n\nexport const getAllProduct = async (search, priceRange) => {\n  const apiUrl = process.env.REACT_APP_API_URL + \"/product/get-all\";\n  const params = new URLSearchParams();\n  if (search) {\n    // Assuming your backend can handle `search` as a general query that checks both 'name' and 'type'\n    params.append('search', search);\n  }\n  params.append('minPrice', priceRange[0]);\n  params.append('maxPrice', priceRange[1]);\n  const queryString = `${apiUrl}?${params.toString()}`;\n  const res = await axios.get(queryString);\n  return res.data;\n};","map":{"version":3,"names":["axios","getAllProduct","search","priceRange","apiUrl","process","env","REACT_APP_API_URL","params","URLSearchParams","append","queryString","toString","res","get","data"],"sources":["D:/Tu/NamIII/HKII/test - Copy/src/services/ProductService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// export const getAllProduct = async (search) => {\r\n//     let res = {};\r\n//     if (search.length > 0) {\r\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all?filter=name&filter=${search}`);\r\n//     } else {\r\n//         res = await axios.get(`${process.env.REACT_APP_API_URL}/product/get-all`);\r\n//     }\r\n//     return res.data;\r\n// }\r\n\r\n// export const getAllProduct = async (search, priceRange) => {\r\n//     let queryString = `${process.env.REACT_APP_API_URL}/product/get-all?`;\r\n//     if (search) {\r\n//         queryString += `filter=name||filter=type&filter=${search}&`;\r\n//     }\r\n//     queryString += `minPrice=${priceRange[0]}&maxPrice=${priceRange[1]}`;\r\n//     const res = await axios.get(queryString);\r\n//     return res.data;\r\n// };\r\n\r\n\r\nexport const getAllProduct = async (search, priceRange) => {\r\n    const apiUrl = process.env.REACT_APP_API_URL + \"/product/get-all\";\r\n    const params = new URLSearchParams();\r\n\r\n    if (search) {\r\n        // Assuming your backend can handle `search` as a general query that checks both 'name' and 'type'\r\n        params.append('search', search);\r\n    }\r\n\r\n    params.append('minPrice', priceRange[0]);\r\n    params.append('maxPrice', priceRange[1]);\r\n\r\n    const queryString = `${apiUrl}?${params.toString()}`;\r\n    const res = await axios.get(queryString);\r\n    return res.data;\r\n};\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOC,MAAM,EAAEC,UAAU,KAAK;EACvD,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,GAAG,kBAAkB;EACjE,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;EAEpC,IAAIP,MAAM,EAAE;IACR;IACAM,MAAM,CAACE,MAAM,CAAC,QAAQ,EAAER,MAAM,CAAC;EACnC;EAEAM,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEP,UAAU,CAAC,CAAC,CAAC,CAAC;EACxCK,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEP,UAAU,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMQ,WAAW,GAAI,GAAEP,MAAO,IAAGI,MAAM,CAACI,QAAQ,CAAC,CAAE,EAAC;EACpD,MAAMC,GAAG,GAAG,MAAMb,KAAK,CAACc,GAAG,CAACH,WAAW,CAAC;EACxC,OAAOE,GAAG,CAACE,IAAI;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}